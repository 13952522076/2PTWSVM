function [RAIndex, RBIndex]=srsplit(mode, label, ratio, th)%==========================================================================% To extract reduced set for SVM or SVR, stratified over %   (1) classes (SVM), or slices of sorted responses (SVR); and%   (2) cross-validation folds, if applicable.%--------------------------------------------------------------------------% Inputs:% mode            [1 x 1] : learning algorithm. {'SVM', 'SVR'}% label           [m x 1] : training data label or response% ratio           [1 x 1] : ratio of reduced set size to the full data size % th              [1 x 1] : number of folds in cross-validation%--------------------------------------------------------------------------% Outputs:% For SVM% RAIndex         [th, ?] : the ith row records extracted indices of%                           reduced set for the ith cross-validation fold%                           in the positive class% RBIndex         [th, ?] : the ith row records extracted indices of%                           reduced set for the ith cross-validation fold%                           in the negative class%% For SVR% RAIndex         [th, ?] : the ith row records extracted indices of%                           reduced set for the ith cross-validation fold% RBIndex                 : empty%==========================================================================rand('state',sum(100*clock)); % set random number generator seedif(~exist('th', 'var'))    th =1;endRows=length(label);if(strcmpi(mode, 'svm'))    % SVM    AIndex=find(label>0);    BIndex=setdiff(1:Rows, AIndex)';            ARows=length(AIndex);    BRows=length(BIndex);    ASize=fix(ARows*ratio);    BSize=fix(BRows*ratio);    AIndex_R=AIndex(randperm(ARows));        BIndex_R=BIndex(randperm(BRows));        RAIndex=zeros(th, ASize);    RBIndex=zeros(th, BSize);        for i=1: th                RAIndex(i, :)=AIndex_R((i-1)*ASize+1: i*ASize)';        RBIndex(i, :)=BIndex_R((i-1)*BSize+1: i*BSize)';    end    elseif(strcmpi(mode, 'svr'))    % SVR    [SLabel, SIndex]=sort(label);    clear SLabel;        size=fix(Rows*ratio);% set the number of slices    num=fix(Rows/size);% size of each slice,                        % there might be some left-out elements for a partial slice    boxes=zeros(size, num);     for i=1: size        base=(i-1)*num;        if(i<size)            boxes(i, :)=base + randperm(num);%random permutation within each slice               else            % insure that elements from the last partial slice get a chance            % to enter the reduced set                    tmp=base + randperm(Rows-(num*(size-1)));            boxes(i, :)=tmp(1: num);                    end    end        RAIndex=zeros(num, size);     for i=1: num        RAIndex(i, :)=SIndex(boxes(:, i))'; % pick one index from each slice within each CV-fold    end    RAIndex=RAIndex(1:th, :);else    error([mode, ', unknown!!']);end