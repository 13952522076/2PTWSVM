%clear al4
%clear al4
% clc;clear all;
% load g:\ups59
% B=double(ups59);
load c.mat;
B=ClaveVectors_Firm0x2DTeacher_Model;
%  load ktest.mat;
% B=[train;svm];
% load ticdata.mat;
% B=[d,A];
% load ionodata.mat;
% B=[d,A];

% load wbcd.mat;
% B=[A(:,end),A(:,1:end-1)];
% load wdbc1.mat;
% B=[[yapp,xapp];[ytest,xtest]];

% load gaussxor5.mat;
% B=train;
% load NDC-50k;
% B=[outtrain;outtest];
% A=B(1:end,end);
% C=B(1:end,1:end-1);
% B=[A,C];

cla=1;
A=B(1:end,2:end);
Max=max(max(A));
Min=min(min(A));
A=2*(A-Min)./(Max-Min)-1;
d=(B(1:end,1)==cla)*2-1;

ker='linear'
%ker ='rbf'
k=10;output=1;

[sm sn]=size(A);
accuIter = 0;

cpu_time = 0;
indx = [0:k];
indx = floor(sm*indx/k);    %last row numbers for all 'segments'
% split trainining set from test set

trainCorr=0;
testCorr=0;

a=11;%input('the state=');
rand('state',a);
r=randperm(size(d,1));
d=d(r,:);
A=A(r,:); 

for i = 1:k
Ctest = []; dtest = [];Ctrain = []; dtrain = [];

Ctest = A((indx(i)+1:indx(i+1)),:);
dtest = d(indx(i)+1:indx(i+1));
Ctrain = A(1:indx(i),:);
Ctrain = [Ctrain;A(indx(i+1)+1:sm,:)];
dtrain = [d(1:indx(i));d(indx(i+1)+1:sm,:)];

%加入高斯噪声
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rand('state',a);
r=randperm(size(Ctrain,1));
dtrain=dtrain(r,:);
% r2=randperm(size(Ctrain,1));
Ctrain=Ctrain(r,:);

classNumber=2;
outratio=0.05;
nf=0.1;
for jjk=1:classNumber %%%%%%partion points of each class into k parts.
Inde=(find(dtrain==jjk));
randn('state',jjk*1000);
% randn('state',a);
outn=fix(size(Inde,1)*outratio);
Mm=sqrt(1)*randn(outn,size(Ctrain,2));
% Ctrain(Inde(1:outn,:),:)=Ctrain(Inde(1:outn,:),:)+nf*(norm(Ctrain(Inde(1:outn,:),:),'fro')/norm(Mm,'fro'))*Mm;
Ctrain(Inde(1:outn,:),:)=Ctrain(Inde(1:outn,:),:)+nf*(norm(Ctrain(Inde(1:outn,:),:),'fro')/(norm(Mm,'fro')+eps))*Mm;
% if jjk==1
% tempdata=Ctrain(Inde(1:outn,:),:);
% end
end
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
r=find(dtrain>0);
r1=setdiff(1:length(Ctrain(:,1)),r);
Y1=dtrain(r,:);
Y2=dtrain(r1,:);
cc=Ctrain(r,:);
dd=Ctrain(r1,:);
% tic
% NDC dataset 参数C1=1
% C1=1;

Result=hibiscus(dtrain,Ctrain,k);
C1=Result.Best_C1;

tic
[w1,w2,bias1,bias2]=svc(cc,dd,C1);
thistoc(i,1)=toc;

deci1=Ctrain*w1+bias1;
auc1 = roc_curve(deci1,d);
avgAUC1(i,1)=auc1;

deci2=Ctrain*w2+bias2;
auc2= roc_curve(deci2,d);
avgAUC2(i,1)=auc2;

[err ]= svcerror(w1,w2,bias1,bias2,Ctest,dtest);
tmpTestCorr(i,1)=1-err/length(Ctest(:,1));

[err ]= svcerror(w1,w2,bias1,bias2,Ctrain,dtrain);
tmpTrainCorr(i,1)=1-err/length(Ctrain(:,1));

 if output==1
fprintf(1,'________________________________________________\n');
fprintf(1,'Fold %d\n',i);
fprintf(1,'Training set correctness: %3.2f%%\n',tmpTrainCorr(i,1));
fprintf(1,'Testing set correctness: %3.2f%%\n',tmpTestCorr(i,1));

fprintf(1,'Elapse time: %10.4f\n',thistoc(i,1));
 end

end % end of for (looping through test sets)

     trainCorr = sum(tmpTrainCorr*100)/k;
     testCorr = sum(tmpTestCorr*100)/k;
     cpu_time=sum(thistoc)/k;
     avgAUC1=sum(avgAUC1)/k;
     avgAUC2=sum(avgAUC2)/k;

if output == 1
fprintf(1,'==============================================');
fprintf(1,'\nTraining set correctness: %3.2f%%',trainCorr);
fprintf(1,'\nTesting set correctness: %3.2f%%',testCorr);

fprintf(1,'\nAverage cpu_time: %10.4f\n',cpu_time);
fprintf(1,'\nAverage auc: %10.4f\n',avgAUC1);
fprintf(1,'\nAverage auc: %10.4f\n',avgAUC2);
end

testcorrstd=std(100*tmpTestCorr,1)%%%测试标准差
% traincorrstd=std(100*tmpTrainCorr,1)%%%训练标准差
clear;
% svcplot(A,B,ker,w1,bias1,w2,bias2,0,1,1,2)
%  data=[0.1611,0.1571,0.1550,0.1544,0.1458,0.1448,0.1445];
%  data1=[0.1325,0.1282, 0.1263, 0.1247, 0.1234,0.1217,0.1201,0.1187,0.1184];
%  plot(data1,'-*','lineWidth',2);
% svcplot(A,d,ker,w1,bias1,w2,bias2,1)

% hold on
% plot( tempdata(:,1),tempdata(:,2),'ko','MarkerFaceColor','r','Markersize',5)
% svcplot(Ctrain,dtrain,ker,w1,bias1,w2,bias2,1)
% 自定义坐标轴

% axis([1,10,0.4,1,]);
% hold on
% plot(Data1,'-ro','lineWidth',2);
% plot(Data2,'-b*','lineWidth',2);
% plot(Data3,'-gs','lineWidth',2);
% plot(Data4,'-rd','Color',[0.5 0 0],'lineWidth',2)
% plot(Data5,'-rv','Color',[1 0.5 0],'lineWidth',2)
% legend('L1-GEPSVM','GEPSVM','IGEPSVM','TWSVM','L1-NPSVM',2);
% ylabel('The value of AUC')
% xlabel('10-fold cross validation')
% title('Ionodata datasets')